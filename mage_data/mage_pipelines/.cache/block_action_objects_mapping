{"block_file": {"custom/scrape_batting_box_scores_daily_chunks.py:custom:python:scrape batting box scores daily chunks": {"content": "from bs4 import BeautifulSoup\nimport requests\nimport time\nfrom datetime import datetime\nimport pandas as pd\nimport re\nfrom requests import Session\nfrom datetime import datetime, timedelta\nfrom google.cloud import storage\nfrom os import path\nfrom mage_ai.settings.repo import get_repo_path\nimport urllib.parse\nimport os\n\nif 'data_loader' not in globals():\n    from mage_ai.data_preparation.decorators import data_loader\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\n\n# GET request options\n_HEADERS = {'User-Agent': 'Mozilla/5.0'}\n\n# Define variables for ingestion script\nsport_code = \"MBA\"\nacademic_year = \"2024\"\ndivision = \"1\"\n\n#Open webpage and locate home and away tables to scrape boxstats\ndef get_stats(url):\n    with Session() as s:\n        r = s.get('https://stats.ncaa.org'+url, headers=_HEADERS)\n    if r.status_code == 403:\n        print('An error occurred with the GET Request')\n        print('403 Error: NCAA blocked request')\n    soup = BeautifulSoup(r.text, features='lxml')\n    tables = soup.find_all(\"table\")\n\n    away_table = tables[5]\n    home_table = tables[6]\n\n    away_df = scrape_box_stats(away_table)\n    home_df = scrape_box_stats(home_table)\n\n    return away_df, home_df\n\ndef scrape_box_stats(table):\n    headers = [header.text for header in table.find('tr', {'class': 'grey_heading'}).find_all('th')]        \n    data = []\n    for row in table.find_all('tr', {'class': 'smtext'}):\n        data.append([cell.text.strip().split('/')[0] for cell in row.find_all('td')])  # Split at '/' for dirty data and take the first part\n    df = pd.DataFrame(data, columns=headers)\n    df = df.replace('', 0)\n    return df\n\ndef get_team_names(table_html):\n    # Parse the HTML content\n    soup = BeautifulSoup(table_html, 'html.parser')\n\n    # Find the table rows\n    rows = soup.find_all('tr')\n\n    # Get the team names and remove the record in parentheses\n    away_team_name = rows[1].find('a').text.rsplit(' (', 1)[0].strip()\n    home_team_name = rows[2].find('a').text.rsplit(' (', 1)[0].strip()\n\n    return {\"Away Team\": away_team_name, \"Home Team\": home_team_name}\n\ndef get_game_info(table_html):\n    # Parse the HTML content\n    soup = BeautifulSoup(table_html, 'html.parser')\n\n    # Find the table rows\n    rows = soup.find_all('tr')\n    # Get the game date, location, and attendance (if the data is available)\n    if len(rows)>=3:     \n        game_date = rows[0].find_all('td')[1].text.strip()\n        location = rows[1].find_all('td')[1].text.strip()\n        attendance = rows[2].find_all('td')[1].text.strip()\n    elif len(rows) == 2:\n        # Case: len(rows) = 2\n        game_date = rows[0].find_all('td')[1].text.strip()\n        location = rows[1].find_all('td')[1].text.strip()\n        attendance = None\n    elif len(rows) == 1:\n        # Case: len(rows) = 1\n        game_date = rows[0].find_all('td')[1].text.strip()\n        location = None\n        attendance = None\n    else:\n        # Case: len(rows) = 0\n        game_date, location, attendance = None, None, None\n\n    return {\"Game Date\": game_date, \"Location\": location, \"Attendance\": attendance}\n\ndef get_box_score_links(html):\n    # Parse the HTML content\n    soup = BeautifulSoup(html, 'html.parser')\n    # Find all the 'a' tags\n    a_tags = soup.find_all('a')\n    # Get the links that contain \"box_score\"\n    links = [a['href'] for a in a_tags if \"box_score\" in a['href']]\n    return links\n\n\n@custom\ndef load_data(game_date, *args, **kwargs):\n    # Start the timer\n    start_time = time.time()\n\n    print(f\"Scraping all games on {game_date}. It may take a few minutes to scrape all games on given day...\")\n    base_url = \"https://stats.ncaa.org/contests/livestream_scoreboards\"       \n    params = {\n        \"utf8\": \"\u2713\",\n        \"sport_code\": sport_code,\n        \"academic_year\": academic_year,\n        \"division\": division,\n        \"game_date\": game_date,\n    }\n    \n    with Session() as s:\n        r = s.get(base_url, params=params, headers=_HEADERS)\n    if r.status_code == 403:\n        print('An error occurred with the GET Request')\n        print('403 Error: NCAA blocked request')    \n    \n    num_games = 0 \n    final_batting_df = pd.DataFrame()\n    #Retrieve all links to game box score webpages\n    game_links = get_box_score_links(r.text) \n    for game in game_links:\n        num_games+=1\n        url = 'https://stats.ncaa.org'+game\n        # print(f\"Getting stats from: {url}\")      \n        #------------------------GET URLS FOR BATTING,PITCHING,FIELDING\n        with Session() as s:\n            r = s.get(url, headers=_HEADERS)\n        if r.status_code == 403:\n            print('An error occurred with the GET Request')\n            print('403 Error: NCAA blocked request')\n  \n        soup = BeautifulSoup(r.text, features='lxml')\n        \n        # Find the table element that contains the player data\n        tables = soup.find_all(\"table\")\n        \n        team_names = get_team_names(tables[0].prettify())\n        game_info = get_game_info(tables[2].prettify())\n        stat_type = tables[4].find_all('a')\n        \n        #Store URLs for batting\n        url = stat_type[0]['href']\n\n        # Get the home and away stats for each stat type  \n        away_df, home_df = get_stats(url)  \n  \n        #Add additional fields\n        away_df['game_id'] =  int(re.search(r'\\d+', game).group())\n        home_df['game_id'] = int(re.search(r'\\d+', game).group())\n        away_df['team'] = team_names[\"Away Team\"]\n        home_df['team'] = team_names[\"Home Team\"]\n        away_df['date'] = game_date\n        home_df['date'] = game_date\n        away_df['location'] = game_info[\"Location\"]\n        home_df['location'] = game_info[\"Location\"]\n        away_df['attendance'] = game_info[\"Attendance\"]\n        home_df['attendance'] = game_info[\"Attendance\"]\n        away_df['side'] = 'Visitor'\n        home_df['side'] = 'Home'\n        \n        # Append away and home stats to the final dataframe\n        final_batting_df = pd.concat([final_batting_df, away_df, home_df])\n    print(f\"Finished scraping data from {num_games} games on {game_date}\")\n    \n    # End the timer and print the elapsed time\n    end_time = time.time()\n    print(f\"Time taken: {end_time - start_time} seconds\")\n\n    return final_batting_df\n\n# @test\n# def test_output(output, *args) -> None:\n#     \"\"\"\n#     Template code for testing the output of the block.\n#     \"\"\"\n#     assert output is not None, 'The output is undefined'\n", "file_path": "custom/scrape_batting_box_scores_daily_chunks.py", "language": "python", "type": "custom", "uuid": "scrape_batting_box_scores_daily_chunks"}, "data_exporters/export_titanic_clean.py:data_exporter:python:export titanic clean": {"content": "from mage_ai.io.file import FileIO\nfrom pandas import DataFrame\n\nif 'data_exporter' not in globals():\n    from mage_ai.data_preparation.decorators import data_exporter\n\n\n@data_exporter\ndef export_data_to_file(df: DataFrame, **kwargs) -> None:\n    \"\"\"\n    Template for exporting data to filesystem.\n\n    Docs: https://docs.mage.ai/design/data-loading#example-loading-data-from-a-file\n    \"\"\"\n    filepath = 'titanic_clean.csv'\n    FileIO().export(df, filepath)\n", "file_path": "data_exporters/export_titanic_clean.py", "language": "python", "type": "data_exporter", "uuid": "export_titanic_clean"}, "data_exporters/upload_ncaa_batting_stats_to_big_query.py:data_exporter:python:upload ncaa batting stats to big query": {"content": "from mage_ai.settings.repo import get_repo_path\nfrom mage_ai.io.bigquery import BigQuery\nfrom mage_ai.io.config import ConfigFileLoader\nfrom pandas import DataFrame\nfrom os import path\nimport os\n\nif 'data_exporter' not in globals():\n    from mage_ai.data_preparation.decorators import data_exporter\n\n\n@data_exporter\ndef export_data_to_big_query(df: DataFrame, **kwargs) -> None:\n\n    #Replace with variables somewhere\n    project_name = os.getenv('GCP_PROJECT_NAME')\n    dataset_name = os.getenv('BIQ_QUERY_DATASET_STG')\n    table_name = 'ncaa_d1_baseball_batting_stats'\n    table_id = f'{project_name}.{dataset_name}.{table_name}'\n    config_path = path.join(get_repo_path(), 'io_config.yaml')\n    config_profile = 'default'\n\n    BigQuery.with_config(ConfigFileLoader(config_path, config_profile)).export(\n        df,\n        table_id,\n        if_exists='replace',  # Specify resolution policy if table name already exists\n    )\n", "file_path": "data_exporters/upload_ncaa_batting_stats_to_big_query.py", "language": "python", "type": "data_exporter", "uuid": "upload_ncaa_batting_stats_to_big_query"}, "data_exporters/export_batting_box_score_daily_chunks_to_gcs.py:data_exporter:python:export batting box score daily chunks to gcs": {"content": "from mage_ai.settings.repo import get_repo_path\nfrom mage_ai.io.config import ConfigFileLoader\nfrom mage_ai.io.google_cloud_storage import GoogleCloudStorage\nfrom google.cloud import storage\nfrom pandas import DataFrame\nimport pandas as pd\nfrom os import path\nimport os  \nimport pyarrow as pa\nimport pyarrow.parquet as pq\n\nif 'data_exporter' not in globals():\n    from mage_ai.data_preparation.decorators import data_exporter\n\nos.environ['GOOGLE_APPLICATION_CREDENTIALS'] = os.getenv('GCP_CREDENTIALS')\nbucket_name = os.getenv('GCS_BUCKET_NAME')\nproject_id = os.getenv('GCP_PROJECT_ID')\n\nroot_path = f'{bucket_name}/batting_stats'\n\ndef delete_gcs_folder_if_dates_exist(bucket_name, date_list):\n    \"\"\"Checks if a folder with a specific date exists in the bucket and deletes if found.\"\"\"\n    storage_client = storage.Client()\n    bucket = storage_client.bucket(bucket_name)\n    blobs = bucket.list_blobs()\n    for folder_date in date_list:\n        for blob in bucket.list_blobs():\n            if f\"/date={folder_date}/\" in blob.name:\n                print(f\"Deleted blob: {blob.name}\")\n                blob.delete()\n\n@data_exporter\ndef export_data_to_google_cloud_storage(df: DataFrame, **kwargs) -> None:\n    if df.empty:\n        return None\n    else:\n        #CODE TO DELETE AN EXISTING BLOB BASED ON THE DATE PASSED IN\n        scraped_dates = df['date'].unique().tolist() \n        delete_gcs_folder_if_dates_exist(bucket_name, scraped_dates)\n        table = pa.Table.from_pandas(df)\n        gcs = pa.fs.GcsFileSystem()\n        pq.write_to_dataset(\n            table,\n            root_path=root_path,\n            partition_cols=['date'],\n            filesystem=gcs\n    )\n", "file_path": "data_exporters/export_batting_box_score_daily_chunks_to_gcs.py", "language": "python", "type": "data_exporter", "uuid": "export_batting_box_score_daily_chunks_to_gcs"}, "data_loaders/get_all_date_chunks_for_scraping.py:data_loader:python:get all date chunks for scraping": {"content": "from mage_ai.settings.repo import get_repo_path\nfrom mage_ai.io.config import ConfigFileLoader\nfrom mage_ai.io.google_cloud_storage import GoogleCloudStorage\nfrom os import path\nimport os\nfrom datetime import datetime, timedelta\nif 'data_loader' not in globals():\n    from mage_ai.data_preparation.decorators import data_loader\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\nconfig_path = path.join(get_repo_path(), 'io_config.yaml')\nconfig_profile = 'default'\nbucket_name = os.getenv('GCS_BUCKET_NAME') #replace w global variable\nobject_key = 'batting_stats/date=' #replace w global variable\n\ndef extract_dates(strings):\n    dates = []\n    for s in strings:\n        start = s.find('date=') + len('date=')\n        date_str = s[start:start+10]\n        date_obj = datetime.strptime(date_str, '%Y-%m-%d').date()  # Convert to date\n        dates.append(date_obj)\n    return dates\n\ndef get_all_scraped_dates_in_gcs():\n    gcs = GoogleCloudStorage.with_config(ConfigFileLoader(config_path, config_profile))\n    blobs = gcs.client.list_blobs(bucket_name, prefix=object_key)\n    object_keys = [blob.name for blob in blobs if blob.name.endswith('.parquet')]\n    date_strings = extract_dates(object_keys)\n    dates = [date_string for date_string in date_strings]\n    return dates\n    \ndef get_all_dates_in_season():\n    start_date_str = '02/16/2024'  # Replace with automatic variable for first day of season\n    start_date = datetime.strptime(start_date_str, \"%m/%d/%Y\").date()\n    \n    #DEV - FOR TESTING INDIVIDUAL DATES\n    # end_date_str = '02/16/2024'\n    # end_date = datetime.strptime(end_date_str, \"%m/%d/%Y\").date() \n    \n    #PROD - GET ALL DATES IN SEASON THAT ARE NOT SCRAPED YET AND LOADED TO GOOGLE CLOUD STORAGE\n    end_date = datetime.now().date()-timedelta(days=1)\n\n    all_dates = [start_date + timedelta(days=i) for i in range((end_date - start_date).days + 1)]\n    return all_dates\n\n@data_loader\ndef load_from_google_cloud_storage(*args, **kwargs):\n   \n    dates_scraped = get_all_scraped_dates_in_gcs()\n    all_dates = get_all_dates_in_season()\n    missing_dates = [date for date in all_dates if date not in dates_scraped]\n    if not missing_dates:\n        today = datetime.now().date()\n        missing_dates = [today-timedelta(days=2),today-timedelta(days=1)] #rescrape last 3 days games in case data is delayed/updated\n    return [missing_dates]", "file_path": "data_loaders/get_all_date_chunks_for_scraping.py", "language": "python", "type": "data_loader", "uuid": "get_all_date_chunks_for_scraping"}, "data_loaders/load_ncaa_batting_stats_from_gcs.py:data_loader:python:load ncaa batting stats from gcs": {"content": "from mage_ai.settings.repo import get_repo_path\nfrom mage_ai.io.config import ConfigFileLoader\nfrom mage_ai.io.google_cloud_storage import GoogleCloudStorage\nfrom os import path\nimport os\nfrom datetime import datetime, timedelta\nimport pandas as pd\nif 'data_loader' not in globals():\n    from mage_ai.data_preparation.decorators import data_loader\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\nconfig_path = path.join(get_repo_path(), 'io_config.yaml')\nconfig_profile = 'default'\nbucket_name = os.getenv('GCS_BUCKET_NAME') \nobject_key = 'batting_stats/date=' \n\ndef extract_dates(strings):\n    dates = []\n    for s in strings:\n        start = s.find('date=') + len('date=')\n        date_str = s[start:start+10]\n        date_obj = datetime.strptime(date_str, '%Y-%m-%d').date()  # Convert to date\n        dates.append(date_obj)\n    return dates\n\ndef get_all_scraped_dates_and_obj_keys_in_gcs():\n    gcs = GoogleCloudStorage.with_config(ConfigFileLoader(config_path, config_profile))\n    blobs = gcs.client.list_blobs(bucket_name, prefix=object_key)\n    object_keys = [blob.name for blob in blobs if blob.name.endswith('.parquet')]\n    date_strings = extract_dates(object_keys)\n    dates = [date_string for date_string in date_strings]\n    return dates, object_keys\n   \n@data_loader\ndef load_all_partitions_from_gcs(*args, **kwargs):\n    \n    dates, object_keys = get_all_scraped_dates_and_obj_keys_in_gcs()\n    \n    df = pd.DataFrame()\n    for object_key, date in zip(object_keys, dates):\n        print(object_key)\n        print(dates)\n        data = GoogleCloudStorage.with_config(ConfigFileLoader(config_path, config_profile)).load(\n            bucket_name,\n            object_key,\n            format='parquet'\n        )\n\n        # ADD DATE BACK AS A COLUMN\n        data = data.assign(date=date)\n        df = pd.concat([df,data])\n        print(f\"Finished appending data from {date}\")\n\n    # Return the DataFrame\n    return df\n", "file_path": "data_loaders/load_ncaa_batting_stats_from_gcs.py", "language": "python", "type": "data_loader", "uuid": "load_ncaa_batting_stats_from_gcs"}, "scratchpads/print_env_variables.py:scratchpad:python:print env variables": {"content": "import os\n\n# Get the list of all environment variables\nenv_vars = os.environ\n\n# Print the variables\nfor var, value in env_vars.items():\n    print(f\"{var}: {value}\")\n\nproject_name = os.getenv('GCP_PROJECT_NAME')\ndataset_name = os.getenv('BIQ_QUERY_DATASET_STG')\ntable_name = os.getenv('BIG_QUERY_TABLE_NAME_STG')\ntable_id = f'{project_name}.{dataset_name}.{table_name}'\nprint(os.getenv('BIQ_QUERY_DATASET_STG'))", "file_path": "scratchpads/print_env_variables.py", "language": "python", "type": "scratchpad", "uuid": "print_env_variables"}, "transformers/fill_in_missing_values.py:transformer:python:fill in missing values": {"content": "from pandas import DataFrame\nimport math\n\nif 'transformer' not in globals():\n    from mage_ai.data_preparation.decorators import transformer\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\ndef select_number_columns(df: DataFrame) -> DataFrame:\n    return df[['Age', 'Fare', 'Parch', 'Pclass', 'SibSp', 'Survived']]\n\n\ndef fill_missing_values_with_median(df: DataFrame) -> DataFrame:\n    for col in df.columns:\n        values = sorted(df[col].dropna().tolist())\n        median_age = values[math.floor(len(values) / 2)]\n        df[[col]] = df[[col]].fillna(median_age)\n    return df\n\n\n@transformer\ndef transform_df(df: DataFrame, *args, **kwargs) -> DataFrame:\n    \"\"\"\n    Template code for a transformer block.\n\n    Add more parameters to this function if this block has multiple parent blocks.\n    There should be one parameter for each output variable from each parent block.\n\n    Args:\n        df (DataFrame): Data frame from parent block.\n\n    Returns:\n        DataFrame: Transformed data frame\n    \"\"\"\n    # Specify your transformation logic here\n\n    return fill_missing_values_with_median(select_number_columns(df))\n\n\n@test\ndef test_output(df) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert df is not None, 'The output is undefined'\n", "file_path": "transformers/fill_in_missing_values.py", "language": "python", "type": "transformer", "uuid": "fill_in_missing_values"}, "transformers/transform_pre_bigquery.py:transformer:python:transform pre bigquery": {"content": "if 'transformer' not in globals():\n    from mage_ai.data_preparation.decorators import transformer\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\n\n@transformer\ndef transform(data, *args, **kwargs):\n\n    new_column_names = {\n        \"Player\": \"player\",\n        \"Pos\": \"position\",\n        \"G\": \"games\",\n        \"R\": \"runs\",\n        \"AB\": \"at_bats\",\n        \"H\": \"hits\",\n        \"2B\": \"doubles\",\n        \"3B\": \"triples\",\n        \"TB\": \"total_bases\",\n        \"HR\": \"home_runs\",\n        \"RBI\": \"rbis\",\n        \"BB\": \"walks\",\n        \"HBP\": \"hit_by_pitch\",\n        \"SF\": \"sacrifice_flys\",\n        \"SH\": \"sacrifice_hits\",\n        \"K\": \"strikeouts\",\n        \"OPP DP\": \"opp_double_play\",\n        \"CS\": \"caught_stealing\",\n        \"Picked\": \"picked\",\n        \"SB\": \"stolen_bases\",\n        \"IBB\": \"intentional_walks\",\n        \"GDP\": \"ground_into_double_play\",\n        \"RBI2out\": \"two_out_rbis\",\n        \"game_id\": \"game_id\",\n        \"team\": \"team\",\n        \"side\": \"home_or_away\",\n        \"location\": \"location\",\n        \"attendance\": \"attendance\",\n        \"ingestion_date\": \"ingestion_date\",\n        \"date\": \"date\"\n    }\n\n    # Define your new column order here\n    new_column_order = [\n        \"date\",\n        \"game_id\",\n        \"team\",\n        \"home_or_away\",\n        \"player\",\n        \"position\",\n        \"games\",\n        \"runs\",\n        \"at_bats\",\n        \"hits\",\n        \"doubles\",\n        \"triples\",\n        \"total_bases\",\n        \"home_runs\",\n        \"rbis\",\n        \"walks\",\n        \"hit_by_pitch\",\n        \"sacrifice_flys\",\n        \"sacrifice_hits\",\n        \"strikeouts\",\n        \"opp_double_play\",\n        \"caught_stealing\",\n        \"picked\",\n        \"stolen_bases\",\n        \"intentional_walks\",\n        \"ground_into_double_play\",\n        \"two_out_rbis\",\n        \"location\",\n        \"attendance\",\n        \"ingestion_date\"       \n    ]\n\n    # Rename the columns\n    data.rename(columns=new_column_names, inplace=True)\n\n    # Reorder the columns\n    data = data[new_column_order]\n    \n    return data\n\n@test\ndef test_output(output, *args) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert output is not None, 'The output is undefined'\n", "file_path": "transformers/transform_pre_bigquery.py", "language": "python", "type": "transformer", "uuid": "transform_pre_bigquery"}, "transformers/transform_batting_box_score_chunks.py:transformer:python:transform batting box score chunks": {"content": "from mage_ai.data_cleaner.transformer_actions.base import BaseAction\nfrom mage_ai.data_cleaner.transformer_actions.constants import ActionType, Axis\nfrom mage_ai.data_cleaner.transformer_actions.utils import build_transformer_action\nfrom pandas import DataFrame\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime, timedelta\n\nif 'transformer' not in globals():\n    from mage_ai.data_preparation.decorators import transformer\nif 'test' not in globals():\n    from mage_ai.data_preparation.decorators import test\n\n\n@transformer\ndef execute_transformer_action(df, *args, **kwargs):\n    if df.empty:\n        return df\n    final_batting_df = df\n    #TRANSFORM DATA (CASTING TO CORRECT DTYPES etc.)\n    batting_int_cols = ['G', 'R', 'AB', 'H', '2B', '3B', 'TB', 'HR', 'RBI', 'BB', 'HBP', 'SF', 'SH', 'K', 'OPP DP', 'CS', 'Picked', 'SB', 'IBB', 'GDP', 'RBI2out','game_id','attendance']\n\n    for col in batting_int_cols:\n        final_batting_df[col] = final_batting_df[col].astype(str).str.replace(',', '')\n        final_batting_df[col] = pd.to_numeric(final_batting_df[col].replace('', np.nan), errors='coerce').astype('Int64')\n\n    final_batting_df['ingestion_date'] = datetime.now()\n    final_batting_df = final_batting_df.astype({\n        'Player': str,\n        'Pos': str,\n        'team': str,\n        'location': str,\n        'side': str,\n        'date': 'datetime64[ns]',\n        'ingestion_date': 'datetime64[ns]'\n    })\n\n    final_batting_df['date']=final_batting_df['date'].dt.date\n\n    return final_batting_df\n\n@test\ndef test_output(output, *args) -> None:\n    \"\"\"\n    Template code for testing the output of the block.\n    \"\"\"\n    assert output is not None, 'The output is undefined'", "file_path": "transformers/transform_batting_box_score_chunks.py", "language": "python", "type": "transformer", "uuid": "transform_batting_box_score_chunks"}}, "custom_block_template": {}, "mage_template": {"data_loaders/deltalake/s3.py:data_loader:python:Amazon S3:Load a Delta Table from Amazon S3.:Delta Lake": {"block_type": "data_loader", "description": "Load a Delta Table from Amazon S3.", "groups": ["Delta Lake"], "language": "python", "name": "Amazon S3", "path": "data_loaders/deltalake/s3.py"}, "data_loaders/deltalake/azure_blob_storage.py:data_loader:python:Azure Blob Storage:Load a Delta Table from Azure Blob Storage.:Delta Lake": {"block_type": "data_loader", "description": "Load a Delta Table from Azure Blob Storage.", "groups": ["Delta Lake"], "language": "python", "name": "Azure Blob Storage", "path": "data_loaders/deltalake/azure_blob_storage.py"}, "data_loaders/deltalake/gcs.py:data_loader:python:Google Cloud Storage:Load a Delta Table from Google Cloud Storage.:Delta Lake": {"block_type": "data_loader", "description": "Load a Delta Table from Google Cloud Storage.", "groups": ["Delta Lake"], "language": "python", "name": "Google Cloud Storage", "path": "data_loaders/deltalake/gcs.py"}, "data_loaders/mongodb.py:data_loader:python:MongoDB:Load data from MongoDB.:Databases (NoSQL)": {"block_type": "data_loader", "description": "Load data from MongoDB.", "groups": ["Databases (NoSQL)"], "language": "python", "name": "MongoDB", "path": "data_loaders/mongodb.py"}, "data_loaders/mssql.py:data_loader:python:MSSQL:Load data from MSSQL.:Databases": {"block_type": "data_loader", "description": "Load data from MSSQL.", "groups": ["Databases"], "language": "python", "name": "MSSQL", "path": "data_loaders/mssql.py"}, "data_exporters/deltalake/s3.py:data_exporter:python:Amazon S3:Export data to a Delta Table in Amazon S3.:Delta Lake": {"block_type": "data_exporter", "description": "Export data to a Delta Table in Amazon S3.", "groups": ["Delta Lake"], "language": "python", "name": "Amazon S3", "path": "data_exporters/deltalake/s3.py"}, "data_exporters/deltalake/azure_blob_storage.py:data_exporter:python:Azure Blob Storage:Export data to a Delta Table in Azure Blob Storage.:Delta Lake": {"block_type": "data_exporter", "description": "Export data to a Delta Table in Azure Blob Storage.", "groups": ["Delta Lake"], "language": "python", "name": "Azure Blob Storage", "path": "data_exporters/deltalake/azure_blob_storage.py"}, "data_exporters/deltalake/gcs.py:data_exporter:python:Google Cloud Storage:Export data to a Delta Table in Google Cloud Storage.:Delta Lake": {"block_type": "data_exporter", "description": "Export data to a Delta Table in Google Cloud Storage.", "groups": ["Delta Lake"], "language": "python", "name": "Google Cloud Storage", "path": "data_exporters/deltalake/gcs.py"}, "data_exporters/mongodb.py:data_exporter:python:MongoDB:Export data to MongoDB.": {"block_type": "data_exporter", "description": "Export data to MongoDB.", "language": "python", "name": "MongoDB", "path": "data_exporters/mongodb.py"}, "data_exporters/mssql.py:data_exporter:python:MSSQL:Export data to MSSQL.:Databases": {"block_type": "data_exporter", "description": "Export data to MSSQL.", "groups": ["Databases"], "language": "python", "name": "MSSQL", "path": "data_exporters/mssql.py"}, "data_loaders/orchestration/triggers/default.jinja:data_loader:python:Trigger pipeline:Trigger another pipeline to run.:Orchestration": {"block_type": "data_loader", "description": "Trigger another pipeline to run.", "groups": ["Orchestration"], "language": "python", "name": "Trigger pipeline", "path": "data_loaders/orchestration/triggers/default.jinja"}, "data_exporters/orchestration/triggers/default.jinja:data_exporter:python:Trigger pipeline:Trigger another pipeline to run.:Orchestration": {"block_type": "data_exporter", "description": "Trigger another pipeline to run.", "groups": ["Orchestration"], "language": "python", "name": "Trigger pipeline", "path": "data_exporters/orchestration/triggers/default.jinja"}, "callbacks/base.jinja:callback:python:Base template:Base template with empty functions.": {"block_type": "callback", "description": "Base template with empty functions.", "language": "python", "name": "Base template", "path": "callbacks/base.jinja"}, "callbacks/orchestration/triggers/default.jinja:callback:python:Trigger pipeline:Trigger another pipeline to run.:Orchestration": {"block_type": "callback", "description": "Trigger another pipeline to run.", "groups": ["Orchestration"], "language": "python", "name": "Trigger pipeline", "path": "callbacks/orchestration/triggers/default.jinja"}, "conditionals/base.jinja:conditional:python:Base template:Base template with empty functions.": {"block_type": "conditional", "description": "Base template with empty functions.", "language": "python", "name": "Base template", "path": "conditionals/base.jinja"}, "data_loaders/default.jinja:data_loader:python:Base template (generic)": {"block_type": "data_loader", "language": "python", "name": "Base template (generic)", "path": "data_loaders/default.jinja"}, "data_loaders/s3.py:data_loader:python:Amazon S3:Data lakes": {"block_type": "data_loader", "groups": ["Data lakes"], "language": "python", "name": "Amazon S3", "path": "data_loaders/s3.py"}, "data_loaders/azure_blob_storage.py:data_loader:python:Azure Blob Storage:Data lakes": {"block_type": "data_loader", "groups": ["Data lakes"], "language": "python", "name": "Azure Blob Storage", "path": "data_loaders/azure_blob_storage.py"}, "data_loaders/google_cloud_storage.py:data_loader:python:Google Cloud Storage:Data lakes": {"block_type": "data_loader", "groups": ["Data lakes"], "language": "python", "name": "Google Cloud Storage", "path": "data_loaders/google_cloud_storage.py"}, "data_loaders/redshift.py:data_loader:python:Amazon Redshift:Data warehouses": {"block_type": "data_loader", "groups": ["Data warehouses"], "language": "python", "name": "Amazon Redshift", "path": "data_loaders/redshift.py"}, "data_loaders/bigquery.py:data_loader:python:Google BigQuery:Load data from Google BigQuery.:Data warehouses": {"block_type": "data_loader", "description": "Load data from Google BigQuery.", "groups": ["Data warehouses"], "language": "python", "name": "Google BigQuery", "path": "data_loaders/bigquery.py"}, "data_loaders/snowflake.py:data_loader:python:Snowflake:Data warehouses": {"block_type": "data_loader", "groups": ["Data warehouses"], "language": "python", "name": "Snowflake", "path": "data_loaders/snowflake.py"}, "data_loaders/algolia.py:data_loader:python:Algolia:Databases": {"block_type": "data_loader", "groups": ["Databases"], "language": "python", "name": "Algolia", "path": "data_loaders/algolia.py"}, "data_loaders/chroma.py:data_loader:python:Chroma:Databases": {"block_type": "data_loader", "groups": ["Databases"], "language": "python", "name": "Chroma", "path": "data_loaders/chroma.py"}, "data_loaders/duckdb.py:data_loader:python:DuckDB:Databases": {"block_type": "data_loader", "groups": ["Databases"], "language": "python", "name": "DuckDB", "path": "data_loaders/duckdb.py"}, "data_loaders/mysql.py:data_loader:python:MySQL:Databases": {"block_type": "data_loader", "groups": ["Databases"], "language": "python", "name": "MySQL", "path": "data_loaders/mysql.py"}, "data_loaders/oracledb.py:data_loader:python:Oracle DB:Databases": {"block_type": "data_loader", "groups": ["Databases"], "language": "python", "name": "Oracle DB", "path": "data_loaders/oracledb.py"}, "data_loaders/postgres.py:data_loader:python:PostgreSQL:Databases": {"block_type": "data_loader", "groups": ["Databases"], "language": "python", "name": "PostgreSQL", "path": "data_loaders/postgres.py"}, "data_loaders/qdrant.py:data_loader:python:Qdrant:Databases": {"block_type": "data_loader", "groups": ["Databases"], "language": "python", "name": "Qdrant", "path": "data_loaders/qdrant.py"}, "data_loaders/weaviate.py:data_loader:python:Weaviate:Databases": {"block_type": "data_loader", "groups": ["Databases"], "language": "python", "name": "Weaviate", "path": "data_loaders/weaviate.py"}, "data_loaders/api.py:data_loader:python:API:Fetch data from an API request.": {"block_type": "data_loader", "description": "Fetch data from an API request.", "language": "python", "name": "API", "path": "data_loaders/api.py"}, "data_loaders/file.py:data_loader:python:Local file:Load data from a file on your machine.": {"block_type": "data_loader", "description": "Load data from a file on your machine.", "language": "python", "name": "Local file", "path": "data_loaders/file.py"}, "data_loaders/google_sheets.py:data_loader:python:Google Sheets:Load data from a worksheet in Google Sheets.": {"block_type": "data_loader", "description": "Load data from a worksheet in Google Sheets.", "language": "python", "name": "Google Sheets", "path": "data_loaders/google_sheets.py"}, "data_loaders/druid.py:data_loader:python:Druid": {"block_type": "data_loader", "language": "python", "name": "Druid", "path": "data_loaders/druid.py"}, "transformers/default.jinja:transformer:python:Base template (generic)": {"block_type": "transformer", "language": "python", "name": "Base template (generic)", "path": "transformers/default.jinja"}, "transformers/data_warehouse_transformer.jinja:transformer:python:Amazon Redshift:Data warehouses": {"block_type": "transformer", "groups": ["Data warehouses"], "language": "python", "name": "Amazon Redshift", "path": "transformers/data_warehouse_transformer.jinja", "template_variables": {"additional_args": "\n        loader.commit() # Permanently apply database changes", "data_source": "redshift", "data_source_handler": "Redshift"}}, "transformers/data_warehouse_transformer.jinja:transformer:python:Google BigQuery:Data warehouses": {"block_type": "transformer", "groups": ["Data warehouses"], "language": "python", "name": "Google BigQuery", "path": "transformers/data_warehouse_transformer.jinja", "template_variables": {"additional_args": "", "data_source": "bigquery", "data_source_handler": "BigQuery"}}, "transformers/data_warehouse_transformer.jinja:transformer:python:Snowflake:Data warehouses": {"block_type": "transformer", "groups": ["Data warehouses"], "language": "python", "name": "Snowflake", "path": "transformers/data_warehouse_transformer.jinja", "template_variables": {"additional_args": "\n        loader.commit() # Permanently apply database changes", "data_source": "snowflake", "data_source_handler": "Snowflake"}}, "transformers/data_warehouse_transformer.jinja:transformer:python:PostgreSQL:Databases": {"block_type": "transformer", "groups": ["Databases"], "language": "python", "name": "PostgreSQL", "path": "transformers/data_warehouse_transformer.jinja", "template_variables": {"additional_args": "\n        loader.commit() # Permanently apply database changes", "data_source": "postgres", "data_source_handler": "Postgres"}}, "transformers/transformer_actions/row/drop_duplicate.py:transformer:python:Drop duplicate rows:Row actions": {"block_type": "transformer", "groups": ["Row actions"], "language": "python", "name": "Drop duplicate rows", "path": "transformers/transformer_actions/row/drop_duplicate.py"}, "transformers/transformer_actions/row/filter.py:transformer:python:Filter rows:Row actions": {"block_type": "transformer", "groups": ["Row actions"], "language": "python", "name": "Filter rows", "path": "transformers/transformer_actions/row/filter.py"}, "transformers/transformer_actions/row/remove.py:transformer:python:Remove rows:Row actions": {"block_type": "transformer", "groups": ["Row actions"], "language": "python", "name": "Remove rows", "path": "transformers/transformer_actions/row/remove.py"}, "transformers/transformer_actions/row/sort.py:transformer:python:Sort rows:Row actions": {"block_type": "transformer", "groups": ["Row actions"], "language": "python", "name": "Sort rows", "path": "transformers/transformer_actions/row/sort.py"}, "transformers/transformer_actions/column/average.py:transformer:python:Average value of column:Column actions:Aggregate": {"block_type": "transformer", "groups": ["Column actions", "Aggregate"], "language": "python", "name": "Average value of column", "path": "transformers/transformer_actions/column/average.py"}, "transformers/transformer_actions/column/count_distinct.py:transformer:python:Count unique values in column:Column actions:Aggregate": {"block_type": "transformer", "groups": ["Column actions", "Aggregate"], "language": "python", "name": "Count unique values in column", "path": "transformers/transformer_actions/column/count_distinct.py"}, "transformers/transformer_actions/column/first.py:transformer:python:First value in column:Column actions:Aggregate": {"block_type": "transformer", "groups": ["Column actions", "Aggregate"], "language": "python", "name": "First value in column", "path": "transformers/transformer_actions/column/first.py"}, "transformers/transformer_actions/column/last.py:transformer:python:Last value in column:Column actions:Aggregate": {"block_type": "transformer", "groups": ["Column actions", "Aggregate"], "language": "python", "name": "Last value in column", "path": "transformers/transformer_actions/column/last.py"}, "transformers/transformer_actions/column/max.py:transformer:python:Maximum value in column:Column actions:Aggregate": {"block_type": "transformer", "groups": ["Column actions", "Aggregate"], "language": "python", "name": "Maximum value in column", "path": "transformers/transformer_actions/column/max.py"}, "transformers/transformer_actions/column/median.py:transformer:python:Median value in column:Column actions:Aggregate": {"block_type": "transformer", "groups": ["Column actions", "Aggregate"], "language": "python", "name": "Median value in column", "path": "transformers/transformer_actions/column/median.py"}, "transformers/transformer_actions/column/min.py:transformer:python:Min value in column:Column actions:Aggregate": {"block_type": "transformer", "groups": ["Column actions", "Aggregate"], "language": "python", "name": "Min value in column", "path": "transformers/transformer_actions/column/min.py"}, "transformers/transformer_actions/column/sum.py:transformer:python:Sum of all values in column:Column actions:Aggregate": {"block_type": "transformer", "groups": ["Column actions", "Aggregate"], "language": "python", "name": "Sum of all values in column", "path": "transformers/transformer_actions/column/sum.py"}, "transformers/transformer_actions/column/count.py:transformer:python:Total count of values in column:Column actions:Aggregate": {"block_type": "transformer", "groups": ["Column actions", "Aggregate"], "language": "python", "name": "Total count of values in column", "path": "transformers/transformer_actions/column/count.py"}, "transformers/transformer_actions/column/clean_column_name.py:transformer:python:Clean column name:Column actions:Formatting": {"block_type": "transformer", "groups": ["Column actions", "Formatting"], "language": "python", "name": "Clean column name", "path": "transformers/transformer_actions/column/clean_column_name.py"}, "transformers/transformer_actions/column/fix_syntax_errors.py:transformer:python:Fix syntax errors:Column actions:Formatting": {"block_type": "transformer", "groups": ["Column actions", "Formatting"], "language": "python", "name": "Fix syntax errors", "path": "transformers/transformer_actions/column/fix_syntax_errors.py"}, "transformers/transformer_actions/column/reformat.py:transformer:python:Reformat values in column:Column actions:Formatting": {"block_type": "transformer", "groups": ["Column actions", "Formatting"], "language": "python", "name": "Reformat values in column", "path": "transformers/transformer_actions/column/reformat.py"}, "transformers/transformer_actions/column/select.py:transformer:python:Keep column(s):Column actions:Column removal": {"block_type": "transformer", "groups": ["Column actions", "Column removal"], "language": "python", "name": "Keep column(s)", "path": "transformers/transformer_actions/column/select.py"}, "transformers/transformer_actions/column/remove.py:transformer:python:Remove column(s):Column actions:Column removal": {"block_type": "transformer", "groups": ["Column actions", "Column removal"], "language": "python", "name": "Remove column(s)", "path": "transformers/transformer_actions/column/remove.py"}, "transformers/transformer_actions/column/shift_down.py:transformer:python:Shift row values down:Column actions:Shift": {"block_type": "transformer", "groups": ["Column actions", "Shift"], "language": "python", "name": "Shift row values down", "path": "transformers/transformer_actions/column/shift_down.py"}, "transformers/transformer_actions/column/shift_up.py:transformer:python:Shift row values up:Column actions:Shift": {"block_type": "transformer", "groups": ["Column actions", "Shift"], "language": "python", "name": "Shift row values up", "path": "transformers/transformer_actions/column/shift_up.py"}, "transformers/transformer_actions/column/normalize.py:transformer:python:Normalize data:Column actions:Feature scaling": {"block_type": "transformer", "groups": ["Column actions", "Feature scaling"], "language": "python", "name": "Normalize data", "path": "transformers/transformer_actions/column/normalize.py"}, "transformers/transformer_actions/column/standardize.py:transformer:python:Standardize data:Column actions:Feature scaling": {"block_type": "transformer", "groups": ["Column actions", "Feature scaling"], "language": "python", "name": "Standardize data", "path": "transformers/transformer_actions/column/standardize.py"}, "transformers/transformer_actions/column/impute.py:transformer:python:Fill in missing values:Column actions:Data cleaning": {"block_type": "transformer", "groups": ["Column actions", "Data cleaning"], "language": "python", "name": "Fill in missing values", "path": "transformers/transformer_actions/column/impute.py"}, "transformers/transformer_actions/column/remove_outliers.py:transformer:python:Remove outliers:Column actions:Data cleaning": {"block_type": "transformer", "groups": ["Column actions", "Data cleaning"], "language": "python", "name": "Remove outliers", "path": "transformers/transformer_actions/column/remove_outliers.py"}, "transformers/transformer_actions/column/diff.py:transformer:python:Calculate difference between values:Column actions:Feature extraction": {"block_type": "transformer", "groups": ["Column actions", "Feature extraction"], "language": "python", "name": "Calculate difference between values", "path": "transformers/transformer_actions/column/diff.py"}, "data_exporters/default.jinja:data_exporter:python:Base template (generic)": {"block_type": "data_exporter", "language": "python", "name": "Base template (generic)", "path": "data_exporters/default.jinja"}, "data_exporters/file.py:data_exporter:python:Local file": {"block_type": "data_exporter", "language": "python", "name": "Local file", "path": "data_exporters/file.py"}, "data_exporters/google_sheets.py:data_exporter:python:Google Sheets": {"block_type": "data_exporter", "language": "python", "name": "Google Sheets", "path": "data_exporters/google_sheets.py"}, "data_exporters/s3.py:data_exporter:python:Amazon S3:Data lakes": {"block_type": "data_exporter", "groups": ["Data lakes"], "language": "python", "name": "Amazon S3", "path": "data_exporters/s3.py"}, "data_exporters/azure_blob_storage.py:data_exporter:python:Azure Blob Storage:Data lakes": {"block_type": "data_exporter", "groups": ["Data lakes"], "language": "python", "name": "Azure Blob Storage", "path": "data_exporters/azure_blob_storage.py"}, "data_exporters/google_cloud_storage.py:data_exporter:python:Google Cloud Storage:Data lakes": {"block_type": "data_exporter", "groups": ["Data lakes"], "language": "python", "name": "Google Cloud Storage", "path": "data_exporters/google_cloud_storage.py"}, "data_exporters/redshift.py:data_exporter:python:Amazon Redshift:Data warehouses": {"block_type": "data_exporter", "groups": ["Data warehouses"], "language": "python", "name": "Amazon Redshift", "path": "data_exporters/redshift.py"}, "data_exporters/bigquery.py:data_exporter:python:Google BigQuery:Data warehouses": {"block_type": "data_exporter", "groups": ["Data warehouses"], "language": "python", "name": "Google BigQuery", "path": "data_exporters/bigquery.py"}, "data_exporters/snowflake.py:data_exporter:python:Snowflake:Data warehouses": {"block_type": "data_exporter", "groups": ["Data warehouses"], "language": "python", "name": "Snowflake", "path": "data_exporters/snowflake.py"}, "data_exporters/algolia.py:data_exporter:python:Algolia:Databases": {"block_type": "data_exporter", "groups": ["Databases"], "language": "python", "name": "Algolia", "path": "data_exporters/algolia.py"}, "data_exporters/chroma.py:data_exporter:python:Chroma:Databases": {"block_type": "data_exporter", "groups": ["Databases"], "language": "python", "name": "Chroma", "path": "data_exporters/chroma.py"}, "data_exporters/duckdb.py:data_exporter:python:DuckDB:Databases": {"block_type": "data_exporter", "groups": ["Databases"], "language": "python", "name": "DuckDB", "path": "data_exporters/duckdb.py"}, "data_exporters/mysql.py:data_exporter:python:MySQL:Databases": {"block_type": "data_exporter", "groups": ["Databases"], "language": "python", "name": "MySQL", "path": "data_exporters/mysql.py"}, "data_exporters/oracledb.py:data_exporter:python:OracleDB:Databases": {"block_type": "data_exporter", "groups": ["Databases"], "language": "python", "name": "OracleDB", "path": "data_exporters/oracledb.py"}, "data_exporters/postgres.py:data_exporter:python:PostgreSQL:Databases": {"block_type": "data_exporter", "groups": ["Databases"], "language": "python", "name": "PostgreSQL", "path": "data_exporters/postgres.py"}, "data_exporters/qdrant.py:data_exporter:python:Qdrant:Databases": {"block_type": "data_exporter", "groups": ["Databases"], "language": "python", "name": "Qdrant", "path": "data_exporters/qdrant.py"}, "data_exporters/weaviate.py:data_exporter:python:Weaviate:Databases": {"block_type": "data_exporter", "groups": ["Databases"], "language": "python", "name": "Weaviate", "path": "data_exporters/weaviate.py"}, "sensors/default.py:sensor:python:Base template (generic)": {"block_type": "sensor", "language": "python", "name": "Base template (generic)", "path": "sensors/default.py"}, "sensors/s3.py:sensor:python:Amazon S3:Data lakes": {"block_type": "sensor", "groups": ["Data lakes"], "language": "python", "name": "Amazon S3", "path": "sensors/s3.py"}, "sensors/google_cloud_storage.py:sensor:python:Google Cloud Storage:Data lakes": {"block_type": "sensor", "groups": ["Data lakes"], "language": "python", "name": "Google Cloud Storage", "path": "sensors/google_cloud_storage.py"}, "sensors/redshift.py:sensor:python:Amazon Redshift:Data warehouses": {"block_type": "sensor", "groups": ["Data warehouses"], "language": "python", "name": "Amazon Redshift", "path": "sensors/redshift.py"}, "sensors/bigquery.py:sensor:python:Google BigQuery:Data warehouses": {"block_type": "sensor", "groups": ["Data warehouses"], "language": "python", "name": "Google BigQuery", "path": "sensors/bigquery.py"}, "sensors/snowflake.py:sensor:python:Snowflake:Data warehouses": {"block_type": "sensor", "groups": ["Data warehouses"], "language": "python", "name": "Snowflake", "path": "sensors/snowflake.py"}, "sensors/mysql.py:sensor:python:MySQL:Databases": {"block_type": "sensor", "groups": ["Databases"], "language": "python", "name": "MySQL", "path": "sensors/mysql.py"}, "sensors/postgres.py:sensor:python:PostgreSQL:Databases": {"block_type": "sensor", "groups": ["Databases"], "language": "python", "name": "PostgreSQL", "path": "sensors/postgres.py"}}}